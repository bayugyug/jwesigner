// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bayugyug/jwesigner (interfaces: Creator)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	rsa "crypto/rsa"
	reflect "reflect"

	jwesigner "github.com/bayugyug/jwesigner"
	gomock "github.com/golang/mock/gomock"
)

// MockCreator is a mock of Creator interface.
type MockCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorMockRecorder
}

// MockCreatorMockRecorder is the mock recorder for MockCreator.
type MockCreatorMockRecorder struct {
	mock *MockCreator
}

// NewMockCreator creates a new mock instance.
func NewMockCreator(ctrl *gomock.Controller) *MockCreator {
	mock := &MockCreator{ctrl: ctrl}
	mock.recorder = &MockCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreator) EXPECT() *MockCreatorMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockCreator) Decrypt(arg0 context.Context, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockCreatorMockRecorder) Decrypt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCreator)(nil).Decrypt), arg0, arg1)
}

// Encrypt mocks base method.
func (m *MockCreator) Encrypt(arg0 context.Context, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockCreatorMockRecorder) Encrypt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCreator)(nil).Encrypt), arg0, arg1)
}

// GetOption mocks base method.
func (m *MockCreator) GetOption() *jwesigner.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOption")
	ret0, _ := ret[0].(*jwesigner.Options)
	return ret0
}

// GetOption indicates an expected call of GetOption.
func (mr *MockCreatorMockRecorder) GetOption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOption", reflect.TypeOf((*MockCreator)(nil).GetOption))
}

// GetRSAPrivateKey mocks base method.
func (m *MockCreator) GetRSAPrivateKey() *rsa.PrivateKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRSAPrivateKey")
	ret0, _ := ret[0].(*rsa.PrivateKey)
	return ret0
}

// GetRSAPrivateKey indicates an expected call of GetRSAPrivateKey.
func (mr *MockCreatorMockRecorder) GetRSAPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRSAPrivateKey", reflect.TypeOf((*MockCreator)(nil).GetRSAPrivateKey))
}

// GetRSAPublicKey mocks base method.
func (m *MockCreator) GetRSAPublicKey() *rsa.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRSAPublicKey")
	ret0, _ := ret[0].(*rsa.PublicKey)
	return ret0
}

// GetRSAPublicKey indicates an expected call of GetRSAPublicKey.
func (mr *MockCreatorMockRecorder) GetRSAPublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRSAPublicKey", reflect.TypeOf((*MockCreator)(nil).GetRSAPublicKey))
}

// SetOption mocks base method.
func (m *MockCreator) SetOption(arg0 *jwesigner.Options) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOption", arg0)
}

// SetOption indicates an expected call of SetOption.
func (mr *MockCreatorMockRecorder) SetOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOption", reflect.TypeOf((*MockCreator)(nil).SetOption), arg0)
}

// Sign mocks base method.
func (m *MockCreator) Sign(arg0 context.Context, arg1 []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockCreatorMockRecorder) Sign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockCreator)(nil).Sign), arg0, arg1)
}

// Verify mocks base method.
func (m *MockCreator) Verify(arg0 context.Context, arg1 string) (*jwesigner.Verified, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(*jwesigner.Verified)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockCreatorMockRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCreator)(nil).Verify), arg0, arg1)
}
